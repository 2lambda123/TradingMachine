{
  "name": "TradingMachine",
  "tagline": "TradingMachine is a mini-trading system simulation written in Java 8, whose components (market data and order simulators, FIX acceptor and initiator, back-end for filled orders) interact by queues and topics.",
  "body": "TradingMachine is a mini-trading system simulation made of the following components:\r\n\r\n* Market data feed: randomly builds ask and bid prices for a given symbol and then publishes them onto a queue every X seconds.\r\n* Orders feed: randomly builds market, limit and stop orders and then publishes them onto a queue every X seconds.\r\n* FIX acceptor: listens on the market data and orders queues and provides order execution by a matching engine. Specifically, it can deal with market, limit and stop orders. While the first one will be always filled (no quantity gets provided by the market data, for now), the last two may not always be filled. It'll try to match them based on the current market data for the symbol.\r\n* FIX initiation: acts as an OMS, routing orders to the acceptor. It listens on the orders queue and forwards them to the FIX acceptor. If the acceptor replies with filled orders, then it publishes them on a topic.\r\n* Filled orders back-end store: subscribing to the filled orders topic, it stores them to MongoDB and MySql back-ends. The scripts to set up the MySQL database, tables and stored procedure, are provided in TradingServices/src/main/resources.\r\n\r\nHere it's the high level architecture:\r\n\r\n![TradingMachine Architecture](https://github.com/NicolaNardino/TradingMachine/wiki/Images/TradingMachineArchitecture.jpg)\r\n\r\nTechnologies: Java 8, QuickFIX/J (FIX 5.0). ActiveMQ, MongoDB and MySql.\r\nDevelopment environment: Ubuntu 15, Eclipse Mars.\r\n\r\nHow-to run all components\r\n* ServicesRunner, which starts the market data, orders feed and filled orders subscriber.\r\n* TradingMachineServer, which starts the FIX acceptor.\r\n* TradingMachineOrderRouter, which startst the OMS and FIX initiator.\r\n\r\n## Upcoming developments\r\n* Stop_limit orders matching algorithm.\r\n* More project documentation and Javadoc.\r\n* Trade monitor UI.\r\n* JNDI-based topic and queues. In fact, for now I'm using the custom (very good) ActiveMQ implementation.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}